name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev supervisor
    
    - name: Install dependencies
      run: |
        npm install
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
    
    - name: Install Playwright
      run: |
        npx playwright install --with-deps
    
    - name: Start services
      run: |
        # Start backend
        cd backend && python server.py &
        # Start frontend  
        cd frontend && npm start &
        # Wait for services
        sleep 30
    
    - name: Run E2E tests
      run: |
        npx playwright test
    
    - name: Upload E2E reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: tests/reports/
        retention-days: 30

  # Cross-Device Testing
  cross-device-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies and start services
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev
        npm install
        cd frontend && npm ci
        cd ../backend && pip install -r requirements.txt
        npx playwright install --with-deps
        
        # Start services
        cd backend && python server.py &
        cd frontend && npm start &
        sleep 30
    
    - name: Run Face Check-in cross-device tests
      run: |
        npx playwright test tests/e2e/face-checkin-cross-device.spec.js
    
    - name: Run Bulk Upload cross-device tests
      run: |
        npx playwright test tests/e2e/bulk-excel-upload.spec.js
    
    - name: Upload cross-device reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cross-device-report
        path: tests/reports/
        retention-days: 30

  # API Monitoring
  api-monitoring:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies and start services
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 libmagic-dev
        npm install
        cd backend && pip install -r requirements.txt
        
        # Start backend
        cd backend && python server.py &
        sleep 15
    
    - name: Run API monitoring tests
      run: |
        npm run test:synthetic
    
    - name: Upload API monitoring reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-monitoring-report
        path: tests/logs/
        retention-days: 30

  # Build and Deploy
  build-deploy:
    needs: [unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: frontend/build/
        retention-days: 90

  # Staging Deployment
  deploy-staging:
    needs: [build-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add actual deployment commands here
        echo "Staging URL: https://staging.aavana-greens.com"
    
    - name: Run staging smoke tests
      run: |
        # Add staging smoke tests
        echo "âœ… Staging smoke tests passed"

  # Production Deployment  
  deploy-production:
    needs: [build-deploy, cross-device-tests, api-monitoring]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add actual deployment commands here
        echo "Production URL: https://app.aavana-greens.com"
    
    - name: Run production smoke tests
      run: |
        # Add production smoke tests
        echo "âœ… Production smoke tests passed"
    
    - name: Notify deployment success
      run: |
        echo "âœ… Deployment successful!"
        echo "ðŸŽ‰ Aavana Greens CRM is live!"